/*
    Web Server

    Hosts static content for debugging
    Hosts HTTPS websocket server to set up WebRTC
    Hosts WebRTC datachannel-only server for browser
*/


//------------------------------------------------------------------------------
// Dependencies

const fs = require("fs");
const path = require('path');
const url = require('url');
const express = require('express');
const https = require('https');
const WebSocket = require('ws');
const loader = require("@assemblyscript/loader");
const node_datachannel = require('node-datachannel');


//------------------------------------------------------------------------------
// AssemblyScript

const wasmImports = {
    client: {
        consoleLog: (m) => {
            // Make a copy because the memory may have moved by the next tick
            var copy = wasmExports.__getString(m);
            setTimeout(() => {
                console.log(copy);
            }, 50);
        }
    }
};

const memory = new WebAssembly.Memory({ initial: 10_000 });

var importObject = {
    ...wasmImports,
    env: {
        memory: memory
    }
};

const wasmModule = loader.instantiateSync(fs.readFileSync(__dirname + "/server.wasm"), importObject);


//------------------------------------------------------------------------------
// HTTPS

// Key generated by `npm run keygen`
var privateKey  = fs.readFileSync(__dirname + "/../key.pem", 'utf8');
var certificate = fs.readFileSync(__dirname + "/../cert.pem", 'utf8');
var credentials = { key: privateKey, cert: certificate };

var app = express();

app.use("/", express.static(path.join(__dirname, '../client/deploy')));

var httpsServer = https.createServer(credentials, app);
httpsServer.listen(8443);


//------------------------------------------------------------------------------
// WebRTC DataChannel

node_datachannel.initLogger("Verbose");

let dc2 = null;

let peer2 = new node_datachannel.PeerConnection("Peer2", {
    enableIceTcp: false,
    iceServers: ["stun:stun.l.google.com:19302"]
});

// Set Callbacks
peer2.onStateChange((state) => {
    console.log("Peer2 State:", state);
});
peer2.onGatheringStateChange((state) => {
    console.log("Peer2 GatheringState:", state);
});
peer2.onLocalDescription((sdp, type) => {
    console.log("Peer2 SDP:", sdp, " Type:", type);
    //peer1.setRemoteDescription(sdp, type);
    // Send info over websockets here
});
peer2.onLocalCandidate((candidate, mid) => {
    console.log("Peer2 Candidate:", candidate);
    //peer1.addRemoteCandidate(candidate, mid);
    // Send info over websockets here
});
peer2.onDataChannel((dc) => {
    console.log("Peer2 Got DataChannel: ", dc.getLabel());
    dc2 = dc;
    dc2.onMessage((msg) => {
        console.log('Peer2 Received Msg:', msg);
    });
    dc2.sendMessage("Hello From Peer2");
});

/*
setTimeout(() => {
    if (dc2 != null) {
        dc2.close();
    }
    peer2.close();
    dc2 = null;
    peer2 = null;
    node_datachannel.cleanup();
}, 10 * 1000);
*/


//------------------------------------------------------------------------------
// WebSocket

const wss = new WebSocket.Server({
    noServer: true,
    backlog: 1024,
    clientTracking: false,
    perMessageDeflate: false
    }, () => {
    console.log("WebSocket Server listening");
});

wss.on('close', () => {
    console.log("WebSocket Server closed");
});

wss.on('connection', (ws, req, url) => {
    const ip = req.socket.remoteAddress;
    console.log(`WebSocket Client connected: ` + ip, " id = ", url);

    var heartbeat = () => {
        // Send ping
        ws.ping(() => {});

        // Wait for pong timeout
        ws.pongTimeout = setTimeout(() => {
            console.log("Client heartbeat timeout");
            ws.terminate();
        }, 25_000);
    };

    ws.on('pong', () => {
        console.log("Client heartbeat");
        clearTimeout(ws.pingTimeout);
        clearTimeout(ws.pongTimeout);

        // Wait 10 seconds and ping again
        ws.pingTimeout = setTimeout(heartbeat, 10_000);
    });
    heartbeat();

    ws.on('message', (buffer) => {
        console.log("WebSocket Client message");
    });

    ws.on('error', () => {
        console.log(`WebSocket Client error`);
    });

    ws.on('close', () => {
        console.log(`WebSocket Client disconnected`);
    });
});

httpsServer.on('upgrade', function upgrade(request, socket, head) {
    const url = request.url;
    if (url && url.startsWith("/ss")) {
      wss.handleUpgrade(request, socket, head, function done(ws) {
        wss.emit('connection', ws, request, url);
      });
    } else {
      socket.destroy();
    }
});
